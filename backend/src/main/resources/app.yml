app:
  authBypassed: false
  # Things written as ${} are replaced by environment variables or by entries in the property file
  # What percentage of stock to avoid selling to prevent overselling
  orderAddress: ${ORDER_HOST}
  inventoryHoldbackPercentage: ${INVENTORY_HOLDBACK_PERCENTAGE}
  userAddress: ${USER_HOST}
  v1BackendKey: ${V1_BACKEND_KEY} # key sent between backend services
  v1BackendJwt: ${CLIENT_JWT_TOKEN} # jwt sent between backend services
  maxThreadCount:

  janus:
    baseUrl: ${KEYCLOAK_URL}
    apiKey: ${KEYCLOAK_CUSTOMIZE_ASSIGNMENT_API_CLIENT_API_KEY}
    apiSecret: ${KEYCLOAK_CUSTOMIZE_ASSIGNMENT_API_CLIENT_SECRET}

  redisStore:
    host:
    port: 6379
    clusterMode: true

  redisStorePredictions:
    host:
    port: 6379
    clusterMode: true

customizeReadDatabase:
  driverClass: software.aws.rds.jdbc.mysql.Driver
  url: jdbc:mysql:aws://${DB_RO_CUSTOMIZE_HOST}/${DB_NA_CUSTOMIZE_NAME}?zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false
  user: ${DB_RO_CUSTOMIZE_USERNAME}
  password: ${DB_RO_CUSTOMIZE_PASSWORD}
  maxWaitForConnection: 3s
  validationQuery: "/* MyService Health Check */ SELECT 1"
  validationQueryTimeout: 3s
  maxSize: 312
  minSize: 28
  initialSize: 64
  checkConnectionOnBorrow: true

customizeWriteDatabase:
  driverClass: software.aws.rds.jdbc.mysql.Driver
  url: jdbc:mysql:aws://${DB_RW_CUSTOMIZE_HOST}/${DB_NA_CUSTOMIZE_NAME}?zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false
  user: ${DB_RW_CUSTOMIZE_USERNAME}
  password: ${DB_RW_CUSTOMIZE_PASSWORD}
  maxWaitForConnection: 3s
  validationQuery: "/* MyService Health Check */ SELECT 1"
  validationQueryTimeout: 3s
  maxSize: 312
  minSize: 28
  initialSize: 64
  checkConnectionOnBorrow: true

pushReadDatabase:
  driverClass: software.aws.rds.jdbc.mysql.Driver
  url: jdbc:mysql:aws://${DB_RO_PUSH_HOST}/${DB_NA_PUSH_NAME}?zeroDateTimeBehavior=CONVERT_TO_NULL
  user: ${DB_RO_PUSH_USERNAME}
  password: ${DB_RO_PUSH_PASSWORD}
  maxWaitForConnection: 1s
  validationQuery: "/* MyService Health Check */ SELECT 1"
  validationQueryTimeout: 3s
  checkConnectionOnBorrow: true

shopReadDatabase:
  driverClass: software.aws.rds.jdbc.mysql.Driver
  url: jdbc:mysql:aws://${DB_RO_SHOP_HOST}/${DB_NA_SHOP_NAME}?zeroDateTimeBehavior=CONVERT_TO_NULL
  user: ${DB_RO_SHOP_USERNAME}
  password: ${DB_RO_SHOP_PASSWORD}

  maxWaitForConnection: 1s
  validationQuery: "/* MyService Health Check */ SELECT 1"
  validationQueryTimeout: 3s
  checkConnectionOnBorrow: true

server:
  applicationConnectors:
    - type: http
      port: 8080
      bindHost: 0.0.0.0
      useServerHeader: false
      useDateHeader: false
      useForwardedHeaders: false
      maxRequestHeaderSize: 16KiB
  adminConnectors:
    - type: http
      port: 8081
      acceptorThreads: 1
      selectorThreads: 1
  requestLog:
    appenders: []

logging:
  level: INFO
  appenders:
    - type: console
      layout:
        type: json
        timestampFormat: "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
        prettyPrint: false
        appendLineSeparator: true
        customFieldNames:
          logger: "loggerName"
        additionalFields:
          team: "core"
        flattenMdc: true
  loggers:
    com.fabfitfun: INFO
    io.dropwizard: INFO
    # Jetty outputs port information at INFO
    org.eclipse.jetty: INFO

swagger:
  id: Customize Tools Api Swagger API Document
  resourcePackages:
    - com.fabfitfun.customize.tools.api
  openAPI:
    info:
      title: Sample Swagger API Document
      version: 1.0.0

# feature flag config
launchDarkly:
  redisEnabled: ${LD_REDIS_ENABLED:-true}
  redisHost: ${LD_REDIS_HOST}
  redisPort: ${LD_REDIS_PORT:-6379}
  redisTtl: 600
  redisNamespace: customize-assignment-api-core
  sdkKey: ${LAUNCH_DARKLY_SDK_KEY}
  apiToken: ${LD_API_TOKEN}
  projectKey: core

# feature flag config
customizeLaunchDarkly:
  redisEnabled: ${LD_REDIS_ENABLED:-true}
  redisHost: ${LD_REDIS_HOST}
  redisPort: ${LD_REDIS_PORT:-6379}
  redisTtl: 600
  redisNamespace: customize-assignment-api-customize
  sdkKey: ${CUSTOMIZE_LAUNCH_DARKLY_SDK_KEY}
  apiToken: ${LD_API_TOKEN}
  projectKey: customize

# kafka producer config
kafka:
  brokers: ${KAFKA_BROKERS}
  predictionBrokers: ${ORDER_KAFKA_BROKERS}
  schemaRegistryHost: ${SCHEMA_REGISTRY_URL}
  predictionSchemaRegistryHost: ${ORDER_SCHEMA_REGISTRY_URL}
  clientId: customize-assignment-api-producer-client
  groupId: customize-assignment-api-group
  applicationId: customize-assignment-api-producer-application
  topic: survey-answers
  assignmentTopic: assignment
  predictionTopic: sku_history_compilation
  predictionUsername: ${ORDER_KAFKA_USERNAME}
  predictionPassword: ${ORDER_KAFKA_PASSWORD}
  configuration:
    commit.interval.ms: 1000
    max.poll.records: 100
    acks: ${ACKS}
    linger.ms: 5
