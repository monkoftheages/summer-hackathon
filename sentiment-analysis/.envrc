# shellcheck shell=bash

echo ".envrc running..."

# This causes minikube status pipeline to trigger early exit and then as a result no env vars are set
# strict_env

# Source .env if present
dotenv_if_exists .env

platform=$(uname -s)

# Check for dependencies we need, doing a brew bundle check if something is missing.
if [ "${platform}" == "Darwin" ] ; then# shellcheck shell=bash

if [ -f ".python-version" ] ; then
    layout pyenv $(cat .python-version) || exit 2
    watch_file .python-version
    [[ ! -L .venv ]] && ln -s .direnv/$(basename $VIRTUAL_ENV)/ .venv
    log_status "Loaded pyenv $(cat .python-version)"
fi

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use "poetry new" or "poetry init" to create one first.'
    exit 2
  fi

    # create venv if it doesn't exist
  poetry run true

  export VIRTUAL_ENV=$(poetry env info --path)
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}

layout poetry

dotenv_if_exists .env

    echo "Running brew bundle check..."
    brew bundle check || brew bundle install
fi

if [ "${USE_MINIKUBE:-0}" -eq 1 ]; then
    echo "USE_MINIKUBE=1 set, using minikube"
    MINIKUBE_RUNNING=$(minikube status -o json | jq -r .Host)
    if [ "${MINIKUBE_RUNNING}" != "Running" ]; then
        echo "minikube not runnig! Start with 'minikube start'"
    fi

    export DOCKER_TLS_VERIFY="1";
    MINIKUBE_IP=$(minikube ip)
    export DOCKER_HOST="tcp://${MINIKUBE_IP}:2376";
    export DOCKER_CERT_PATH="${HOME}/.minikube/certs";
    export MINIKUBE_ACTIVE_DOCKERD="minikube";
fi

# Ensure we have a clean PYTHONPATH, no funny 3rd party deps!
unset PYTHONPATH

# Set build flags for any python installs which doesn't have a wheel available
BREW_PREFIX=$(brew --prefix)
export LDFLAGS="-L${BREW_PREFIX}/opt/openssl@1.1/lib"
export CPPFLAGS="-I${BREW_PREFIX}/opt/openssl@1.1/include"

PYTHON_VERSION=$(pyenv local)
if [ $? -eq 0 ]; then
    pyenv version || pyenv install $PYTHON_VERSION
    layout pyenv $PYTHON_VERSION
    watch_file .python-version
    # Some IDEs (PyCharm) can't find the python executable in non-standard directories, fake it
    [[ ! -L .venv && -d .direnv ]] && ln -s .direnv/$(basename $VIRTUAL_ENV)/ .venv
fi

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use "poetry new" or "poetry init" to create one first.'
    exit 2
  fi

  # create venv if it doesn't exist
  poetry run true

  export VIRTUAL_ENV=$(poetry env info --path)
  export POETRY_ACTIVE=1
  PATH_add "$VIRTUAL_ENV/bin"
}

layout poetry

PYTHON_VERSION=$(python --version)
PYTHON_LOCATION=$(type -p python)
echo "Python version: ${PYTHON_VERSION}"
echo "Python location: ${PYTHON_LOCATION}"
echo "...envrc finished"
